E1131910:zone2 stoiang$ terraform apply
data.terraform_remote_state.vpc: Reading...
data.aws_caller_identity.current: Reading...
data.aws_iam_role.eks_node_role: Reading...
data.aws_ami.amazon_linux_2: Reading...
data.aws_iam_policy.cloudwatch-policy: Reading...
data.aws_iam_role.eks_cluster_role: Reading...
module.project_eks.data.aws_iam_policy_document.eks_assume_role_policy: Reading...
module.project_eks.data.aws_iam_policy_document.eks_node_assume_role_policy: Reading...
data.aws_iam_policy.instance-policy: Reading...
module.project_eks.data.aws_iam_policy_document.eks_node_assume_role_policy: Read complete after 0s [id=2851119427]
module.project_eks.data.aws_iam_policy_document.eks_assume_role_policy: Read complete after 0s [id=3552664922]
data.aws_caller_identity.current: Read complete after 0s [id=738782963780]
data.aws_iam_role.eks_node_role: Read complete after 1s [id=app-udacity-eks-node-role]
data.aws_iam_role.eks_cluster_role: Read complete after 1s [id=app-udacity-eks-cluster-role]
data.terraform_remote_state.vpc: Read complete after 2s
data.aws_ami.amazon_linux_2: Read complete after 1s [id=ami-0839bf007aad25236]
data.aws_iam_policy.instance-policy: Read complete after 6s [id=arn:aws:iam::738782963780:policy/app-udacity-instance-policy]
data.aws_iam_policy.cloudwatch-policy: Read complete after 6s [id=arn:aws:iam::738782963780:policy/app-udacity-eks-cluster-role-cloudwatch-policy]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # data.aws_eks_cluster.cluster will be read during apply
  # (config refers to values not yet known)
 <= data "aws_eks_cluster" "cluster" {
      + arn                       = (known after apply)
      + certificate_authority     = (known after apply)
      + cluster_id                = (known after apply)
      + created_at                = (known after apply)
      + enabled_cluster_log_types = (known after apply)
      + endpoint                  = (known after apply)
      + id                        = (known after apply)
      + identity                  = (known after apply)
      + kubernetes_network_config = (known after apply)
      + name                      = (known after apply)
      + outpost_config            = (known after apply)
      + platform_version          = (known after apply)
      + role_arn                  = (known after apply)
      + status                    = (known after apply)
      + tags                      = (known after apply)
      + version                   = (known after apply)
      + vpc_config                = (known after apply)
    }

  # data.aws_eks_cluster_auth.cluster will be read during apply
  # (config refers to values not yet known)
 <= data "aws_eks_cluster_auth" "cluster" {
      + id    = (known after apply)
      + name  = (known after apply)
      + token = (sensitive value)
    }

  # kubernetes_namespace.udacity will be created
  + resource "kubernetes_namespace" "udacity" {
      + id                               = (known after apply)
      + wait_for_default_service_account = false

      + metadata {
          + generation       = (known after apply)
          + name             = "udacity"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }
    }

  # kubernetes_service.grafana-external will be created
  + resource "kubernetes_service" "grafana-external" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + annotations      = {
              + "service.beta.kubernetes.io/aws-load-balancer-nlb-target-type" = "ip"
              + "service.beta.kubernetes.io/aws-load-balancer-type"            = "nlb"
            }
          + generation       = (known after apply)
          + name             = "grafana-external"
          + namespace        = "monitoring"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + allocate_load_balancer_node_ports = true
          + cluster_ip                        = (known after apply)
          + cluster_ips                       = (known after apply)
          + external_traffic_policy           = (known after apply)
          + health_check_node_port            = (known after apply)
          + internal_traffic_policy           = (known after apply)
          + ip_families                       = (known after apply)
          + ip_family_policy                  = (known after apply)
          + publish_not_ready_addresses       = false
          + selector                          = {
              + "app.kubernetes.io/name" = "grafana"
            }
          + session_affinity                  = "None"
          + type                              = "LoadBalancer"

          + port {
              + node_port   = (known after apply)
              + port        = 80
              + protocol    = "TCP"
              + target_port = "3000"
            }
        }
    }

  # module.project_alb.aws_lb.udacity will be created
  + resource "aws_lb" "udacity" {
      + arn                                         = (known after apply)
      + arn_suffix                                  = (known after apply)
      + desync_mitigation_mode                      = "defensive"
      + dns_name                                    = (known after apply)
      + drop_invalid_header_fields                  = false
      + enable_deletion_protection                  = false
      + enable_http2                                = true
      + enable_tls_version_and_cipher_suite_headers = false
      + enable_waf_fail_open                        = false
      + enable_xff_client_port                      = false
      + id                                          = (known after apply)
      + idle_timeout                                = 60
      + internal                                    = false
      + ip_address_type                             = (known after apply)
      + load_balancer_type                          = "application"
      + name                                        = "udacity-lb-tf"
      + name_prefix                                 = (known after apply)
      + preserve_host_header                        = false
      + security_groups                             = (known after apply)
      + subnets                                     = [
          + "subnet-0a292cd3db84e0500",
          + "subnet-0b5643c0ab20758bd",
        ]
      + tags_all                                    = {
          + "Name"      = "udacity"
          + "Terraform" = "true"
        }
      + vpc_id                                      = (known after apply)
      + xff_header_processing_mode                  = "append"
      + zone_id                                     = (known after apply)
    }

  # module.project_alb.aws_lb_listener.udacity will be created
  + resource "aws_lb_listener" "udacity" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 80
      + protocol          = "HTTP"
      + ssl_policy        = (known after apply)
      + tags_all          = {
          + "Name"      = "udacity"
          + "Terraform" = "true"
        }

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # module.project_alb.aws_lb_target_group.udacity will be created
  + resource "aws_lb_target_group" "udacity" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "udacity-lb-tg"
      + name_prefix                        = (known after apply)
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags_all                           = {
          + "Name"      = "udacity"
          + "Terraform" = "true"
        }
      + target_type                        = "instance"
      + vpc_id                             = "vpc-050604a842317a128"
    }

  # module.project_alb.aws_lb_target_group_attachment.udacity[0] will be created
  + resource "aws_lb_target_group_attachment" "udacity" {
      + id               = (known after apply)
      + port             = 80
      + target_group_arn = (known after apply)
      + target_id        = (known after apply)
    }

  # module.project_alb.aws_lb_target_group_attachment.udacity[1] will be created
  + resource "aws_lb_target_group_attachment" "udacity" {
      + id               = (known after apply)
      + port             = 80
      + target_group_arn = (known after apply)
      + target_id        = (known after apply)
    }

  # module.project_alb.aws_lb_target_group_attachment.udacity[2] will be created
  + resource "aws_lb_target_group_attachment" "udacity" {
      + id               = (known after apply)
      + port             = 80
      + target_group_arn = (known after apply)
      + target_id        = (known after apply)
    }

  # module.project_ec2.aws_instance.ubuntu[0] will be created
  + resource "aws_instance" "ubuntu" {
      + ami                                  = "ami-001361966fc765212"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "udacity"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = "subnet-0b5643c0ab20758bd"
      + tags                                 = {
          + "Name" = "Ubuntu-Web"
        }
      + tags_all                             = {
          + "Name"      = "Ubuntu-Web"
          + "Terraform" = "true"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # module.project_ec2.aws_instance.ubuntu[1] will be created
  + resource "aws_instance" "ubuntu" {
      + ami                                  = "ami-001361966fc765212"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "udacity"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = "subnet-0a292cd3db84e0500"
      + tags                                 = {
          + "Name" = "Ubuntu-Web"
        }
      + tags_all                             = {
          + "Name"      = "Ubuntu-Web"
          + "Terraform" = "true"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # module.project_ec2.aws_instance.ubuntu[2] will be created
  + resource "aws_instance" "ubuntu" {
      + ami                                  = "ami-001361966fc765212"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "udacity"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = "subnet-0b5643c0ab20758bd"
      + tags                                 = {
          + "Name" = "Ubuntu-Web"
        }
      + tags_all                             = {
          + "Name"      = "Ubuntu-Web"
          + "Terraform" = "true"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # module.project_ec2.aws_security_group.ec2_sg will be created
  + resource "aws_security_group" "ec2_sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "monitoring"
              + from_port        = 9100
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 9100
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "ssh port"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "web port"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "ec2_sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "ec2_sg"
        }
      + tags_all               = {
          + "Name"      = "ec2_sg"
          + "Terraform" = "true"
        }
      + vpc_id                 = "vpc-050604a842317a128"
    }

  # module.project_eks.aws_eks_cluster.cluster will be created
  + resource "aws_eks_cluster" "cluster" {
      + arn                   = (known after apply)
      + certificate_authority = (known after apply)
      + cluster_id            = (known after apply)
      + created_at            = (known after apply)
      + endpoint              = (known after apply)
      + id                    = (known after apply)
      + identity              = (known after apply)
      + name                  = "udacity-cluster"
      + platform_version      = (known after apply)
      + role_arn              = "arn:aws:iam::738782963780:role/app-udacity-eks-cluster-role"
      + status                = (known after apply)
      + tags_all              = {
          + "Name"      = "udacity"
          + "Terraform" = "true"
        }
      + version               = "1.23"

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = false
          + endpoint_public_access    = true
          + public_access_cidrs       = (known after apply)
          + security_group_ids        = (known after apply)
          + subnet_ids                = [
              + "subnet-01571776c1d4753b8",
              + "subnet-0b3b8ed70bfc5f712",
            ]
          + vpc_id                    = (known after apply)
        }
    }

  # module.project_eks.aws_eks_node_group.node will be created
  + resource "aws_eks_node_group" "node" {
      + ami_type               = (known after apply)
      + arn                    = (known after apply)
      + capacity_type          = (known after apply)
      + cluster_name           = "udacity-cluster"
      + disk_size              = (known after apply)
      + id                     = (known after apply)
      + instance_types         = [
          + "t3.medium",
        ]
      + node_group_name        = "app-udacity-node-group"
      + node_group_name_prefix = (known after apply)
      + node_role_arn          = "arn:aws:iam::738782963780:role/app-udacity-eks-node-role"
      + release_version        = (known after apply)
      + resources              = (known after apply)
      + status                 = (known after apply)
      + subnet_ids             = [
          + "subnet-01571776c1d4753b8",
          + "subnet-0b3b8ed70bfc5f712",
        ]
      + tags                   = {
          + "Name" = "eks-udacity-nodes"
        }
      + tags_all               = {
          + "Name"      = "eks-udacity-nodes"
          + "Terraform" = "true"
        }
      + version                = (known after apply)

      + scaling_config {
          + desired_size = 2
          + max_size     = 2
          + min_size     = 2
        }
    }

  # module.project_eks.aws_iam_role_policy_attachment.cluster_AmazonEKSCloudwatchPolicy will be created
  + resource "aws_iam_role_policy_attachment" "cluster_AmazonEKSCloudwatchPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::738782963780:policy/app-udacity-eks-cluster-role-cloudwatch-policy"
      + role       = "app-udacity-eks-node-role"
    }

  # module.project_eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy will be created
  + resource "aws_iam_role_policy_attachment" "cluster_AmazonEKSClusterPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "app-udacity-eks-cluster-role"
    }

  # module.project_eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy will be created
  + resource "aws_iam_role_policy_attachment" "cluster_AmazonEKSServicePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
      + role       = "app-udacity-eks-cluster-role"
    }

  # module.project_eks.aws_iam_role_policy_attachment.node_AmazonEC2ContainerRegistryReadOnly will be created
  + resource "aws_iam_role_policy_attachment" "node_AmazonEC2ContainerRegistryReadOnly" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "app-udacity-eks-node-role"
    }

  # module.project_eks.aws_iam_role_policy_attachment.node_AmazonEKSWorkerNodePolicy will be created
  + resource "aws_iam_role_policy_attachment" "node_AmazonEKSWorkerNodePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = "app-udacity-eks-node-role"
    }

  # module.project_eks.aws_iam_role_policy_attachment.node_AmazonEKS_CNI_Policy will be created
  + resource "aws_iam_role_policy_attachment" "node_AmazonEKS_CNI_Policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = "app-udacity-eks-node-role"
    }

  # module.project_eks.aws_iam_role_policy_attachment.node_CloudWatchAgentServerPolicy will be created
  + resource "aws_iam_role_policy_attachment" "node_CloudWatchAgentServerPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
      + role       = "app-udacity-eks-node-role"
    }

  # module.project_eks.aws_iam_role_policy_attachment.node_harmony_policy_attachment will be created
  + resource "aws_iam_role_policy_attachment" "node_harmony_policy_attachment" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::738782963780:policy/app-udacity-instance-policy"
      + role       = "app-udacity-eks-node-role"
    }

  # module.project_eks.aws_security_group.eks-cluster will be created
  + resource "aws_security_group" "eks-cluster" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + name                   = "SG-eks-cluster"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = {
          + "Name"      = "udacity"
          + "Terraform" = "true"
        }
      + vpc_id                 = "vpc-050604a842317a128"
    }

Plan: 23 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + account_id  = "738782963780"
  + caller_arn  = "arn:aws:iam::738782963780:user/admin"
  + caller_user = "AIDA2YAXFNBCKQ35UHEYW"

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.project_eks.aws_iam_role_policy_attachment.cluster_AmazonEKSCloudwatchPolicy: Creating...
module.project_eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy: Creating...
module.project_eks.aws_iam_role_policy_attachment.node_AmazonEKS_CNI_Policy: Creating...
module.project_eks.aws_iam_role_policy_attachment.node_AmazonEKSWorkerNodePolicy: Creating...
module.project_eks.aws_iam_role_policy_attachment.node_CloudWatchAgentServerPolicy: Creating...
module.project_eks.aws_iam_role_policy_attachment.node_AmazonEC2ContainerRegistryReadOnly: Creating...
module.project_eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy: Creating...
module.project_alb.aws_lb_target_group.udacity: Creating...
module.project_eks.aws_security_group.eks-cluster: Creating...
module.project_ec2.aws_security_group.ec2_sg: Creating...
module.project_eks.aws_iam_role_policy_attachment.node_AmazonEKS_CNI_Policy: Creation complete after 1s [id=app-udacity-eks-node-role-20231201173028851300000001]
module.project_eks.aws_iam_role_policy_attachment.node_harmony_policy_attachment: Creating...
module.project_eks.aws_iam_role_policy_attachment.cluster_AmazonEKSCloudwatchPolicy: Creation complete after 1s [id=app-udacity-eks-node-role-20231201173028863200000002]
module.project_eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy: Creation complete after 1s [id=app-udacity-eks-cluster-role-20231201173028868500000004]
module.project_eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy: Creation complete after 1s [id=app-udacity-eks-cluster-role-20231201173028868400000003]
module.project_eks.aws_iam_role_policy_attachment.node_CloudWatchAgentServerPolicy: Creation complete after 1s [id=app-udacity-eks-node-role-20231201173028874600000005]
module.project_eks.aws_iam_role_policy_attachment.node_AmazonEKSWorkerNodePolicy: Creation complete after 1s [id=app-udacity-eks-node-role-20231201173028879600000006]
module.project_eks.aws_iam_role_policy_attachment.node_AmazonEC2ContainerRegistryReadOnly: Creation complete after 1s [id=app-udacity-eks-node-role-20231201173028897400000007]
module.project_eks.aws_iam_role_policy_attachment.node_harmony_policy_attachment: Creation complete after 0s [id=app-udacity-eks-node-role-20231201173029147500000008]
module.project_alb.aws_lb_target_group.udacity: Creation complete after 3s [id=arn:aws:elasticloadbalancing:us-west-1:738782963780:targetgroup/udacity-lb-tg/4b95089d514211b5]
module.project_eks.aws_security_group.eks-cluster: Creation complete after 5s [id=sg-0881df0029643816b]
module.project_ec2.aws_security_group.ec2_sg: Creation complete after 5s [id=sg-0f181054b7ac3d00b]
module.project_eks.aws_eks_cluster.cluster: Creating...
module.project_alb.aws_lb.udacity: Creating...
module.project_ec2.aws_instance.ubuntu[2]: Creating...
module.project_ec2.aws_instance.ubuntu[1]: Creating...
module.project_ec2.aws_instance.ubuntu[0]: Creating...
module.project_eks.aws_eks_cluster.cluster: Still creating... [10s elapsed]
module.project_alb.aws_lb.udacity: Still creating... [10s elapsed]
module.project_ec2.aws_instance.ubuntu[2]: Still creating... [10s elapsed]
module.project_ec2.aws_instance.ubuntu[1]: Still creating... [10s elapsed]
module.project_ec2.aws_instance.ubuntu[0]: Still creating... [10s elapsed]
module.project_ec2.aws_instance.ubuntu[2]: Creation complete after 14s [id=i-0d23fa14e9383d06a]
module.project_ec2.aws_instance.ubuntu[1]: Creation complete after 14s [id=i-01c4804370789911d]
module.project_ec2.aws_instance.ubuntu[0]: Creation complete after 14s [id=i-0c5109defc4db7d85]
module.project_alb.aws_lb_target_group_attachment.udacity[0]: Creating...
module.project_alb.aws_lb_target_group_attachment.udacity[1]: Creating...
module.project_alb.aws_lb_target_group_attachment.udacity[2]: Creating...
module.project_alb.aws_lb_target_group_attachment.udacity[1]: Creation complete after 0s [id=arn:aws:elasticloadbalancing:us-west-1:738782963780:targetgroup/udacity-lb-tg/4b95089d514211b5-2023120117304788970000000c]
module.project_alb.aws_lb_target_group_attachment.udacity[2]: Creation complete after 0s [id=arn:aws:elasticloadbalancing:us-west-1:738782963780:targetgroup/udacity-lb-tg/4b95089d514211b5-2023120117304825440000000d]
module.project_alb.aws_lb_target_group_attachment.udacity[0]: Creation complete after 0s [id=arn:aws:elasticloadbalancing:us-west-1:738782963780:targetgroup/udacity-lb-tg/4b95089d514211b5-2023120117304843980000000e]
module.project_eks.aws_eks_cluster.cluster: Still creating... [20s elapsed]
module.project_alb.aws_lb.udacity: Still creating... [20s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [30s elapsed]
module.project_alb.aws_lb.udacity: Still creating... [30s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [40s elapsed]
module.project_alb.aws_lb.udacity: Still creating... [40s elapsed]
module.project_alb.aws_lb.udacity: Still creating... [50s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [50s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [1m0s elapsed]
module.project_alb.aws_lb.udacity: Still creating... [1m0s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [1m10s elapsed]
module.project_alb.aws_lb.udacity: Still creating... [1m10s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [1m20s elapsed]
module.project_alb.aws_lb.udacity: Still creating... [1m20s elapsed]
module.project_alb.aws_lb.udacity: Still creating... [1m30s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [1m30s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [1m40s elapsed]
module.project_alb.aws_lb.udacity: Still creating... [1m40s elapsed]
module.project_alb.aws_lb.udacity: Still creating... [1m50s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [1m50s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [2m0s elapsed]
module.project_alb.aws_lb.udacity: Still creating... [2m0s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [2m10s elapsed]
module.project_alb.aws_lb.udacity: Still creating... [2m10s elapsed]
module.project_alb.aws_lb.udacity: Still creating... [2m20s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [2m20s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [2m30s elapsed]
module.project_alb.aws_lb.udacity: Still creating... [2m30s elapsed]
module.project_alb.aws_lb.udacity: Still creating... [2m40s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [2m40s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [2m50s elapsed]
module.project_alb.aws_lb.udacity: Still creating... [2m50s elapsed]
module.project_alb.aws_lb.udacity: Creation complete after 2m55s [id=arn:aws:elasticloadbalancing:us-west-1:738782963780:loadbalancer/app/udacity-lb-tf/ba1551749185931f]
module.project_alb.aws_lb_listener.udacity: Creating...
module.project_alb.aws_lb_listener.udacity: Creation complete after 1s [id=arn:aws:elasticloadbalancing:us-west-1:738782963780:listener/app/udacity-lb-tf/ba1551749185931f/a4ab0a1e851c072e]
module.project_eks.aws_eks_cluster.cluster: Still creating... [3m0s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [3m10s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [3m20s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [3m30s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [3m40s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [3m50s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [4m0s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [4m10s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [4m20s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [4m30s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [4m40s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [4m50s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [5m0s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [5m10s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [5m20s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [5m30s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [5m40s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [5m50s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [6m0s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [6m10s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [6m20s elapsed]
module.project_eks.aws_eks_cluster.cluster: Still creating... [6m30s elapsed]
module.project_eks.aws_eks_cluster.cluster: Creation complete after 6m38s [id=udacity-cluster]
data.aws_eks_cluster.cluster: Reading...
data.aws_eks_cluster_auth.cluster: Reading...
data.aws_eks_cluster_auth.cluster: Read complete after 0s [id=udacity-cluster]
module.project_eks.aws_eks_node_group.node: Creating...
data.aws_eks_cluster.cluster: Read complete after 0s [id=udacity-cluster]
module.project_eks.aws_eks_node_group.node: Still creating... [10s elapsed]
module.project_eks.aws_eks_node_group.node: Still creating... [20s elapsed]
module.project_eks.aws_eks_node_group.node: Still creating... [30s elapsed]
module.project_eks.aws_eks_node_group.node: Still creating... [40s elapsed]
module.project_eks.aws_eks_node_group.node: Still creating... [50s elapsed]
module.project_eks.aws_eks_node_group.node: Still creating... [1m0s elapsed]
module.project_eks.aws_eks_node_group.node: Still creating... [1m10s elapsed]
module.project_eks.aws_eks_node_group.node: Still creating... [1m20s elapsed]
module.project_eks.aws_eks_node_group.node: Still creating... [1m30s elapsed]
module.project_eks.aws_eks_node_group.node: Still creating... [1m40s elapsed]
module.project_eks.aws_eks_node_group.node: Still creating... [1m50s elapsed]
module.project_eks.aws_eks_node_group.node: Still creating... [2m0s elapsed]
module.project_eks.aws_eks_node_group.node: Still creating... [2m10s elapsed]
module.project_eks.aws_eks_node_group.node: Still creating... [2m20s elapsed]
module.project_eks.aws_eks_node_group.node: Still creating... [2m30s elapsed]
module.project_eks.aws_eks_node_group.node: Still creating... [2m40s elapsed]
module.project_eks.aws_eks_node_group.node: Still creating... [2m50s elapsed]
module.project_eks.aws_eks_node_group.node: Creation complete after 2m53s [id=udacity-cluster:app-udacity-node-group]
kubernetes_namespace.udacity: Creating...
kubernetes_service.grafana-external: Creating...
kubernetes_namespace.udacity: Creation complete after 1s [id=udacity]
╷
│ Error: namespaces "monitoring" not found
│ 
│   with kubernetes_service.grafana-external,
│   on project.tf line 10, in resource "kubernetes_service" "grafana-external":
│   10:   resource "kubernetes_service" "grafana-external" {
│ 
╵
E1131910:zone2 stoiang$ aws eks --region us-west-1 update-kubeconfig --name udacity-cluster
Added new context arn:aws:eks:us-west-1:738782963780:cluster/udacity-cluster to /Users/stoiang/.kube/config
E1131910:zone2 stoiang$ kubectl create namespace monitoring
namespace/monitoring created
E1131910:zone2 stoiang$ terraform apply
data.terraform_remote_state.vpc: Reading...
module.project_eks.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy: Refreshing state... [id=app-udacity-eks-cluster-role-20231201173028868500000004]
module.project_eks.aws_iam_role_policy_attachment.node_AmazonEKS_CNI_Policy: Refreshing state... [id=app-udacity-eks-node-role-20231201173028851300000001]
data.aws_iam_policy.instance-policy: Reading...
module.project_eks.data.aws_iam_policy_document.eks_assume_role_policy: Reading...
module.project_eks.data.aws_iam_policy_document.eks_node_assume_role_policy: Reading...
module.project_eks.aws_iam_role_policy_attachment.node_AmazonEKSWorkerNodePolicy: Refreshing state... [id=app-udacity-eks-node-role-20231201173028879600000006]
data.aws_iam_role.eks_node_role: Reading...
data.aws_iam_role.eks_cluster_role: Reading...
data.aws_iam_policy.cloudwatch-policy: Reading...
module.project_eks.data.aws_iam_policy_document.eks_node_assume_role_policy: Read complete after 0s [id=2851119427]
module.project_eks.data.aws_iam_policy_document.eks_assume_role_policy: Read complete after 0s [id=3552664922]
module.project_eks.aws_iam_role_policy_attachment.node_AmazonEC2ContainerRegistryReadOnly: Refreshing state... [id=app-udacity-eks-node-role-20231201173028897400000007]
module.project_eks.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy: Refreshing state... [id=app-udacity-eks-cluster-role-20231201173028868400000003]
module.project_eks.aws_iam_role_policy_attachment.node_CloudWatchAgentServerPolicy: Refreshing state... [id=app-udacity-eks-node-role-20231201173028874600000005]
data.aws_caller_identity.current: Reading...
data.aws_ami.amazon_linux_2: Reading...
data.aws_iam_role.eks_node_role: Read complete after 0s [id=app-udacity-eks-node-role]
data.aws_iam_role.eks_cluster_role: Read complete after 0s [id=app-udacity-eks-cluster-role]
data.terraform_remote_state.vpc: Read complete after 2s
module.project_eks.aws_security_group.eks-cluster: Refreshing state... [id=sg-0881df0029643816b]
module.project_alb.aws_lb_target_group.udacity: Refreshing state... [id=arn:aws:elasticloadbalancing:us-west-1:738782963780:targetgroup/udacity-lb-tg/4b95089d514211b5]
module.project_ec2.aws_security_group.ec2_sg: Refreshing state... [id=sg-0f181054b7ac3d00b]
data.aws_caller_identity.current: Read complete after 0s [id=738782963780]
module.project_eks.aws_eks_cluster.cluster: Refreshing state... [id=udacity-cluster]
module.project_alb.aws_lb.udacity: Refreshing state... [id=arn:aws:elasticloadbalancing:us-west-1:738782963780:loadbalancer/app/udacity-lb-tf/ba1551749185931f]
module.project_ec2.aws_instance.ubuntu[0]: Refreshing state... [id=i-0c5109defc4db7d85]
module.project_ec2.aws_instance.ubuntu[1]: Refreshing state... [id=i-01c4804370789911d]
module.project_ec2.aws_instance.ubuntu[2]: Refreshing state... [id=i-0d23fa14e9383d06a]
data.aws_ami.amazon_linux_2: Read complete after 1s [id=ami-0839bf007aad25236]
data.aws_eks_cluster_auth.cluster: Reading...
data.aws_eks_cluster.cluster: Reading...
data.aws_eks_cluster_auth.cluster: Read complete after 0s [id=udacity-cluster]
module.project_alb.aws_lb_listener.udacity: Refreshing state... [id=arn:aws:elasticloadbalancing:us-west-1:738782963780:listener/app/udacity-lb-tf/ba1551749185931f/a4ab0a1e851c072e]
data.aws_eks_cluster.cluster: Read complete after 0s [id=udacity-cluster]
module.project_alb.aws_lb_target_group_attachment.udacity[2]: Refreshing state... [id=arn:aws:elasticloadbalancing:us-west-1:738782963780:targetgroup/udacity-lb-tg/4b95089d514211b5-2023120117304825440000000d]
module.project_alb.aws_lb_target_group_attachment.udacity[1]: Refreshing state... [id=arn:aws:elasticloadbalancing:us-west-1:738782963780:targetgroup/udacity-lb-tg/4b95089d514211b5-2023120117304788970000000c]
module.project_alb.aws_lb_target_group_attachment.udacity[0]: Refreshing state... [id=arn:aws:elasticloadbalancing:us-west-1:738782963780:targetgroup/udacity-lb-tg/4b95089d514211b5-2023120117304843980000000e]
data.aws_iam_policy.cloudwatch-policy: Read complete after 6s [id=arn:aws:iam::738782963780:policy/app-udacity-eks-cluster-role-cloudwatch-policy]
module.project_eks.aws_iam_role_policy_attachment.cluster_AmazonEKSCloudwatchPolicy: Refreshing state... [id=app-udacity-eks-node-role-20231201173028863200000002]
data.aws_iam_policy.instance-policy: Read complete after 6s [id=arn:aws:iam::738782963780:policy/app-udacity-instance-policy]
module.project_eks.aws_iam_role_policy_attachment.node_harmony_policy_attachment: Refreshing state... [id=app-udacity-eks-node-role-20231201173029147500000008]
module.project_eks.aws_eks_node_group.node: Refreshing state... [id=udacity-cluster:app-udacity-node-group]
kubernetes_namespace.udacity: Refreshing state... [id=udacity]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # kubernetes_service.grafana-external will be created
  + resource "kubernetes_service" "grafana-external" {
      + id                     = (known after apply)
      + status                 = (known after apply)
      + wait_for_load_balancer = true

      + metadata {
          + annotations      = {
              + "service.beta.kubernetes.io/aws-load-balancer-nlb-target-type" = "ip"
              + "service.beta.kubernetes.io/aws-load-balancer-type"            = "nlb"
            }
          + generation       = (known after apply)
          + name             = "grafana-external"
          + namespace        = "monitoring"
          + resource_version = (known after apply)
          + uid              = (known after apply)
        }

      + spec {
          + allocate_load_balancer_node_ports = true
          + cluster_ip                        = (known after apply)
          + cluster_ips                       = (known after apply)
          + external_traffic_policy           = (known after apply)
          + health_check_node_port            = (known after apply)
          + internal_traffic_policy           = (known after apply)
          + ip_families                       = (known after apply)
          + ip_family_policy                  = (known after apply)
          + publish_not_ready_addresses       = false
          + selector                          = {
              + "app.kubernetes.io/name" = "grafana"
            }
          + session_affinity                  = "None"
          + type                              = "LoadBalancer"

          + port {
              + node_port   = (known after apply)
              + port        = 80
              + protocol    = "TCP"
              + target_port = "3000"
            }
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

kubernetes_service.grafana-external: Creating...
kubernetes_service.grafana-external: Creation complete after 6s [id=monitoring/grafana-external]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

account_id = "738782963780"
caller_arn = "arn:aws:iam::738782963780:user/admin"
caller_user = "AIDA2YAXFNBCKQ35UHEYW"